%
%  Plot residuals form WaveHoltz iterations
%
%  cd /Users/henshaw/Dropbox/research/cgwave/doc/codes
%

  clearvars -except varargin;
  clear global;

  % --- Clear all open figures ----
  % clearOpenFigures(1:6);

%   FigList = findall(groot, 'Type', 'figure');
%   for iFig = 1:numel(FigList)
%       try
%           clf(FigList(iFig));
%       catch
%           % Nothing to do
%       end
%   end

% Set defaults for plotting 
fontSize=16; lineWidth=2; markerSize=6; 
set(0,'DefaultLineMarkerSize',markerSize);
set(0,'DefaultLineLineWidth',lineWidth);
set(0,'DefaultAxesFontSize',fontSize);
set(0,'DefaultLegendFontSize',fontSize);
% size of matlab figure : default = [560,420] 
xwidth = 560;
ywidth = 540; % 570; % 420; % 570;  


caseOption = 'trigHelmholtzCIC';
caseOption = 'gaussianHelmholtzSquare';

% caseOption = 'dielectricCylGDM'; 
% caseOption = 'dielectricSphereGDM'; 

% %% inputs
% % set line width, marker size, font size, figure size, and file type
% plotStyle
% fs=20;
% % 
% % titles:
% % 1 - long case name
% % 2 - readable
% % 3 - none
% titleOption = 2;
% bigLabels = 0;

% if bigLabels
%   fs = 18;
%   ms = 14;
%   lw = 3;
% end

%% files for cases
% read data from the file generated by conv.p 

nd=2;  % Number of space dimensions
if( strcmp(caseOption,'trigHelmholtzCIC')==1 )

  % -- Sine helmholtz solution : CIC grid ----
  plotName = 'gaussianHelmholtzSquare';

  trigHelmholtzCIC4FixedPoint
  itv1 = itv; 
  res1 = res;
  
  trigHelmholtzCIC4Krylov
  itv2 = itv;
  res2 = res;


  semilogy( itv1,res1,'r-x', itv2,res2,'b-o');
  grid on;
  title(sprintf('CgWaveHoltz: CIC Trig, \\omega=%.4g, L_{2h}-res',omega));
  legend('FP','GMRES');
  xlabel('iterations'); 

  pause; pause;

  
elseif( strcmp(caseOption,'gaussianHelmholtzSquare')==1 )

  % -- Gaussian source----
  plotName = 'gaussianHelmholtzSquare';

  gaussianWaveHoltzSquare64Order4FixedPoint
  itv1 = itv; 
  res1 = res;
  
  gaussianWaveHoltzSquare64Order4Krylov
  itv2 = itv;
  res2 = res;


  semilogy( itv1,res1,'r-x', itv2,res2,'b-o');
  grid on;
  title(sprintf('CgWaveHoltz: Gaussian, Square, \\omega=%.4g, L_{2h}-res',omega));
  legend('FP','GMRES');
  xlabel('iterations'); 


else
   fprintf('ERROR: unknown caseOption=%s\n',caseOption);
   pause;
   pause;
   pause;
end   

%   % make sure figure size is correct
pos = get(gcf,'position');  
pos(3) = xwidth;
pos(4) = ywidth;
set(gcf,'position',pos);

savePlotFile(plotName,'pdf'); 

% %% generate plots

% % ----------- Major Case ----------
% n=1; 
% for icase = 1:nCases   

%   fprintf('------- option=%s, icase = %d, n=%d ----------\n',caseOption,icase,n);
  
%   [h1,ev1,pv1,qv1]=getData(n,Cases,N0); n=n+1; 
%   if( numSubCases>1 ) [h2,ev2,pv2,qv2]=getData(n,Cases,N0); n=n+1; end
%   if( numSubCases>2 ) [h3,ev3,pv3,qv3]=getData(n,Cases,N0); n=n+1; end
%   if( numSubCases>3 ) [h4,ev4,pv4,qv4]=getData(n,Cases,N0); n=n+1; end

%   % figure
%   figure
  

%   % number of refinements
%   Ng = length(ev1);

%   %% --- get reference line3 ----
%   order2= 2; % expected order
%   [expected2] = getReferenceLine( ev1,pv1,order2,Ng );
%   order4 = 4; % expected order
%   [expected4] = getReferenceLine( ev2,pv2,order4,Ng );


%   purple   =[.6 .4 1];
%   medBlue  =[.3 .3 1];
%   lightBlue=[.8 .8 1];

%   medRed   =[1 .3 .3 ];
%   lightRed =[1 .8 .8 ];

%   %% plot
%   if( 1==1 )
%     h = ...
%     loglog(h1,ev1,'-ob','linewidth',lw,'markersize',ms,'MarkerFaceColor',medBlue  ,'MarkerEdgeColor','k');
%     hold on;
%     loglog(h1,pv1,'-sb','linewidth',lw,'markersize',ms,'MarkerFaceColor',medBlue  ,'MarkerEdgeColor','k');
%     loglog(h1,qv1,'-sb','linewidth',lw,'markersize',ms,'MarkerFaceColor',medBlue  ,'MarkerEdgeColor','k');
%     if( numSubCases>1 )
%       loglog(h2,ev2,'-dr','linewidth',lw,'markersize',ms,'MarkerFaceColor',medRed,'MarkerEdgeColor','k');
%       loglog(h2,pv2,'-^r','linewidth',lw,'markersize',ms,'MarkerFaceColor',medRed,'MarkerEdgeColor','k');
%       loglog(h2,qv2,'-^r','linewidth',lw,'markersize',ms,'MarkerFaceColor',medRed,'MarkerEdgeColor','k');
%     end
%     % loglog(h3,ev3,'-or','linewidth',lw,'markersize',ms,'MarkerFaceColor',medRed   ,'MarkerEdgeColor','k');
%     % loglog(h3,pv3,'-sr','linewidth',lw,'markersize',ms,'MarkerFaceColor',medRed   ,'MarkerEdgeColor','k');
%     % loglog(h4,ev4,'-dr','linewidth',lw,'markersize',ms,'MarkerFaceColor',lightRed ,'MarkerEdgeColor','k');
%     % loglog(h4,pv4,'-^r','linewidth',lw,'markersize',ms,'MarkerFaceColor',lightRed ,'MarkerEdgeColor','k');

%     % Plot rate lines 
%     loglog(h1,expected2,'k--',...
%            h2,expected4,'k-','linewidth',lw,'markersize',ms);
%     % loglog(h1,expected2,'k--',...
%     %        h3,expected4,'k-','linewidth',lw,'markersize',ms);
  
%   end; 


%   %% labels
%   title(Titles{icase},'interpreter','latex');
%   ylabel('Max error','interpreter','latex');
%   xlabel('$h$','interpreter','latex');

%   %% create legend
%   leg = legend('$\mathbf{E}$, O2','$\mathbf{P}$, O2','$N$, O2', ...
%                '$\mathbf{E}$, O4','$\mathbf{P}$, O4','$N$, O4', ...
%                '$h^2$ ref','$h^4$ ref', ...
%                'Location','SouthEast');
%   % leg = legend('$\mathbf{E}$, N O2','$\mathbf{P}$, N O2', ...
%   %              '$\mathbf{E}$, R O2','$\mathbf{P}$, R O2', ...
%   %              '$\mathbf{E}$, N O4','$\mathbf{P}$, N O4', ...
%   %              '$\mathbf{E}$, R O4','$\mathbf{P}$, R O4', ...
%   %              '$h^2$ ref','$h^4$ ref', ...
%   %              'Location','SouthEast');

%   set(leg,'interpreter','latex');

%   %% create xticks
%   %% set(gca,'XLim',[0.125,1]/N0(n));

%   xlim([min(h1),max(h1)]);

%   NN = round(1./h1);
%   xticks = {};
%   for i = 1:Ng
%     xticks{i} = sprintf('$1/%d$',NN(i));
%   end
%   set(gca,'xtick',h1(end:-1:1));
%   set(gca,'xticklabel',xticks(end:-1:1),'ticklabelinterpreter','latex');

%   set(gca,'ytick',10.^(-16:2:2));
  
%   % ylim([1.e-10,.1]);
  
%   %% grid
%   grid on;
%   set(gca,'xminorgrid','off');   set(gca,'xminortick','off');   set(gca,'yminorgrid','off');   set(gca,'yminortick','off');

%   set(gca,'fontsize',fs);

%   drawnow;
%   % make sure figure size is correct
%   pos = get(gcf,'position');  
%   pos(3) = xwidth;
%   pos(4) = ywidth;
%   set(gcf,'position',pos);

%   savePlotFile(plotName{icase},'pdf'); 

%    % name = sprintf('%s.eps',plotName{icase});
%    % print('-depsc',name);
%    % fprintf('Wrote file [%s]\n',name); 
%    % system(sprintf('/Users/henshaw/bin/pspdf %s',name),'-echo');


  
  
% end


%-----------------------------------------------------------------------
% Return the errors from the conv.p matlab file
%-----------------------------------------------------------------------
function [h,ev,pv,qv]=getData( n,Cases,N0 )

  if length(Cases{n}) >= 63
    % my matlab doesn't run really long file names for some reason...
    newFile = [Cases{n}(1:60),'.m']; 
    copyfile([Cases{n},'.m'],newFile);
    run(newFile);
  else
    run(Cases{n});
  end
  
  h  = hh/N0(n); % grid spacing starts at 1/10 for this case
  
  
  % 2D : u0=Ex, u1=Ey, u2=Hz, u3=Ev u4=Pv u5=Qv
  % 3D : u0=Ex, u1=Ey, u2=Hz, u3=Ev u4=Pv u5=Qv   (check)
  ev = u3;    % | Ev |
  pv = u4;    % | Pv |
  qv = u5;    % | N |
  
end

%-----------------------------------------------------------------------
%% --- reference line ----
% place reference line inside largest gap between lines
%-----------------------------------------------------------------------
function [expected] = getReferenceLine( ev1,pv1,order,Ng )
  lastErrors = [ev1(end),pv1(end)];
  if ev1(end) < 1e-14
    lastErrors = [pv1(end)];
  end
  lastErrorsSorted = sort(lastErrors);
  [~,I] = max(diff(log(lastErrorsSorted)));
  avgErr = exp(mean(log(lastErrorsSorted(I:(I+1)))));

  expected = avgErr*(2^order).^((Ng-1):(-1):0);
end

