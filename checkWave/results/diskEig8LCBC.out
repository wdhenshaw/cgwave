Usage: `mpirun -np N cgWave [-noplot] [file.cmd] [-g=<gridName>]'
Look for Overture configuration file=[/home/henshw/.overturerc]
Successfully opened /home/henshw/Overture.g/overturerc for reading
User commands are being saved in the file `cgWave.cmd'
 ***** Mounting file grids/sice2.order8.ng5.hdf****
getFromADataBase: number of CompositeGrid(s) found =1, name[0]=sic
Time to read in the grid is 1.91e-02(s)
CgWave::setup SETTING orderOfAccuracy=8
#
#  cgWave: Compute to some "known" solutions
#
#   cgWave [-noplot] known.cmd -g=<grid-name> -known=[pw|gpw|boxHelmholtz|polyPeriodic|squareEig|diskEig|annulusEig|sphereEig]
#           -upwind=[0|1] -computeErrors=[0|1]
#           -setKnownOnBoundaries=[0|1] -bcApproach=[cbc|lcbc|oneSided] -assignInterpNeighbours=[extrap|interp]
#           -meApproach=[std,ha|stencil]
#           -ts=[explicit|implicit] -rectangular=[implicit|explicit]
#
#   pw = plane wave
#   gpw = Gaussian plane wave
$known="planeWave";
$amp=1; $kx=1.0; $ky=0; $kz=0; $omega=3.;
$beta=20; $x0=.5; $y0=.0; $z0=.0; $k0=0.; # for Gaussian plane wave
# $ad4=0;   # old
$upwind=0;
$debug=3;  $go="halt"; $bc="d"; $dissFreq=1;
$bcApproach="oneSided"; # bc Approach : cbc, lcbc, oneSided
$useKnownFirstStep=0; $checkKnown=0;
$computeErrors=1; $plotScatteredField=0;
$setKnownOnBoundaries=-1; #-1 : use default
$tf=5.; $tp=.05; $cfl=.9;
$ts="explicit"; $dtMax=1e10; $implicitUpwind=0;
$rectangular="implicit"; # for ts=implicit, set rectangular=explicit to treat rectangular grids explicitly
$beta2=.5; $beta4=0.; $beta6=0.; $beta8=0.; # weights in implicit time-stepping
$meApproach="std"; # or "ha"
$orderInTime=-1;  # -1 = use default
$degreeInSpace=2; $degreeInTime=2;
$assignInterpNeighbours="extrap"; # by default extrap interp neighbours
$nBessel=1; $mTheta=1;
$mPhi=1; $mr=1;
$show=""; $flushFrequency=10;
$solveri="yale"; $maxiti=2000; $rtoli=1.0e-10; $atoli=1.0e-10; # parameters for implicit time-stepping solver
GetOptions( "cfl=f"=>\$cfl,"amp=f"=>\$amp,"kx=f"=>\$kx,"ky=f"=>\$ky,"kz=f"=>\$kz,"debug=i"=>\$debug,            "tf=f"=>\$tf,"tp=f"=>\$tp,"bc=s"=>\$bc,"dissFreq=i"=>\$dissFreq,"omega=f"=>\$omega,"beta2=f"=>\$beta2,"beta4=f"=>\$beta4,            "known=s"=>\$known,"orderInTime=i"=>\$orderInTime,"ts=s"=>\$ts,"dtMax=f"=>\$dtMax,"upwind=i"=>\$upwind,            "x0=f"=>\$x0,"y0=f"=>\$y0,"z0=f"=>\$z0,"k0=f"=>\$k0,"beta=f"=>\$beta,"computeErrors=i"=>\$computeErrors,            "setKnownOnBoundaries=s"=>\$setKnownOnBoundaries,"show=s"=>\$show,"useKnownFirstStep=i"=>\$useKnownFirstStep,            "flushFrequency=i"=>\$flushFrequency,"bcApproach=s"=>\$bcApproach,"meApproach=s"=>\$meApproach,            "nBessel=i"=>\$nBessel,"mPhi=i"=>\$mPhi,"mTheta=i"=>\$mTheta,"mr=i"=>\$mr,"rectangular=s"=>\$rectangular,            "solveri=s"=>\$solveri,"rtoli=f"=>\$rtoli,"atoli=f"=>\$atoli,"maxiti=i"=>\$maxiti,"plotScatteredField=i"=>\$plotScatteredField,            "assignInterpNeighbours=s"=>\$assignInterpNeighbours,"checkKnown=s"=>\$checkKnown,"implicitUpwind=i"=>\$implicitUpwind,"go=s"=>\$go );
#
#
if( $bc eq "d" ){ $bc="dirichlet"; }
if( $bc eq "n" ){ $bc="neumann"; }
if( $bc eq "e" ){ $bc="exact"; }
# if( $bc eq "e" ){ $bc="evenSymmetry"; }
if( $bc eq "r" ){ $bc="radiation"; }
# by default we do NOT set known on boundaries for these solutions:
if( $setKnownOnBoundaries eq "-1" && ($known eq "diskEig" || $known eq "squareEig" || $known eq "annulusEig" || $known eq "sphereEig") ){ $setKnownOnBoundaries=0; }
if( $setKnownOnBoundaries eq "-1" ){ $setKnownOnBoundaries=1; }
# if( $known eq "annulusEig" ){ $setKnownOnBoundaries=0; }
# if( $known eq "sphereEig" ){ $setKnownOnBoundaries=0; }
# time-stepping: (explicit or implicit)
$ts
# pause
tFinal $tf
Setting tFinal=0.1
tPlot $tp
 tPlot=0.1
cfl $cfl
setting cfl=0.9
dtMax $dtMax
Setting dtMax=1e+10
debug $debug
Setting debug=3
omega $omega
Setting omega=3 (and frequencyArray(0))
Answer=omega 3 found in getWaveHoltzOption
set known on boundaries $setKnownOnBoundaries
Setting applyKnownSolutionAtBoundaries=0 (1=apply known solution on boundaries).
Answer=set known on boundaries 0 found in getBoundaryConditionOption
use known for first step $useKnownFirstStep
Setting useKnownSolutionForFirstStep (use known solution for first time step if possible).
compute errors $computeErrors
Setting computeErrors=1 (1=compute errors for TZ or known solutions.
plot scattered field $plotScatteredField
Setting plotScatteredField=0.
if( $orderInTime > 0 ){ $cmd="orderInTime $orderInTime"; }else{ $cmd="#"; }
$cmd
if( $show ne "" ){ $cmd="show file name $show\n save show file 1\n flush frequency $flushFrequency"; }else{ $cmd="#"; }
$cmd
#
$cmd="#";
if( $bcApproach eq "oneSided" ){ $cmd="useOneSidedBCs"; }
if( $bcApproach eq "cbc"      ){ $cmd="useCompatibilityBCs"; }
if( $bcApproach eq "lcbc"     ){ $cmd="useLocalCompatibilityBCs"; }
$cmd
Setting approach for boundary conditions to useLocalCompatibilityBCs
Answer=useLocalCompatibilityBCs found in getBoundaryConditionOption
#
bc=$bc
Setting all boundary conditions to bc=[dirichlet]
Answer=bc=dirichlet found in getBoundaryConditionOption
#
$cmd="#";
if( $meApproach eq "std" ){ $cmd="standard modified equation"; }
if( $meApproach eq "ha" ){ $cmd="hierarchical modified equation"; }
if( $meApproach eq "stencil" ){ $cmd="stencil modified equation"; }
$cmd
Setting modifiedEquationApproach=hierarchical modified equation
#
if( $ts eq "implicit" ){ $cmd="choose grids for implicit\n  rectangular=$rectangular\n done"; }else{ $cmd="#"; }
$cmd
# implicitUpwind = 1 : include upwinding in implicit matrix
implicit upwind $implicitUpwind
Setting implicitUpwind=0 (1=include upwinding in implicit matrix when implicit time-stepping
# beta2=0 : trap, beta2=.5 = FW
implicit weights $beta2 $beta4
Setting implicit time-stepping weights to beta2=0.5, beta4=0, beta6=0, beta8=0
#
if( $assignInterpNeighbours eq "interp" ){ $cmd="interpolateInterpNeighbours"; }else{ $cmd="#"; }
$cmd
#
if( $known eq "boxHelmholtz" ){ $cmd="helmholtzForcing\n user defined forcing...\n box Helmholtz\n exit"; }else{ $cmd="#"; }
if( $known eq "polyPeriodic" ){ $cmd="helmholtzForcing\n user defined forcing...\n poly periodic\n exit"; }
$cmd
#
user defined known solution...
if( $known eq "gpw" ){ $cmd="gaussian plane wave\n wave numbers: $kx $ky $kz\n beta: $beta\n k0: $k0\n offset: $x0 $y0 $z0"; }
if( $known eq "planeWave" || $known eq "pw" ){ $cmd="plane wave\n $amp $kx $ky $kz"; }
if( $known eq "boxHelmholtz"){ $cmd="box helmholtz\n $omega $kx $ky $kz"; }
$degreeInSpaceForPolyPeriodic=1;
if( $known eq "polyPeriodic"){ $cmd="poly periodic\n $omega $degreeInSpaceForPolyPeriodic"; }
# -- disk eigenfunction:
# n,m,a,amp,bcOpt
$rad=1;
if( $bc eq "dirichlet" ){ $bcOpt=0; }else{ $bcOpt=1; }
if( $bc eq "exact" ){ $bcOpt=0; }
if( $known eq "diskEig" ){ $cmd="disk eigenfunction\n $nBessel $mTheta $rad $amp $bcOpt"; }
if( $known eq "annulusEig" ){ $cmd="annulus eigenfunction\n $nBessel $mTheta $amp $bcOpt"; }
if( $known eq "sphereEig" ){ $cmd="sphere eigenfunction\n $mPhi $mTheta $mr $rad $amp $bcOpt"; }
if( $known eq "squareEig" ){ $cmd="square eigenfunction\n $kx $ky $kz"; }
$cmd
disk eigenfunction
--- Eigenfunction for the Wave Equation in the unit disk ---
    u = cos( c*lambda_{m,n} *t ) * Jn(lambda_m*r) * cos(n*theta)  [2D, Dirichlet BCs]
    n = angular number, n=0,1,2,
    m = radial number (m'th zero of Bessel Jn(lambda*a)=0 
    a = radius of the disk
    amp = amplitude
    bcOpt : 0=Dirichlet, 1=Neumann BCs on the annulus.
1 1 1 4 0
Disk eigenfuncton: n=1, m=1, a=1, amp=4, bcOpt=0
done
#
# if( $ad4>0. ){ $upwind=1; }# for backward compatibility
upwind dissipation $upwind
Setting upwind=1 (upwind dissipation is on or off).
#
if( $ts eq "implicit" ){ $cmd="include $ENV{CGWAVE}/runs/include/implicitOptions.h"; }else{ $cmd="#"; }
$cmd
#
# artificial dissipation $ad4
dissipation frequency $dissFreq
ERROR:setTextLabel: label [dissipation frequency] not found!
   Valid labels are
[tFinal]
[cfl]
[show file name]
[flush frequency]
[orderInTime]
[degreeInSpace]
[degreeInTime]
[trig frequencies]
[tPlot]
[tol]
[debug]
[interactiveMode]
[dissipationFrequency]
[dtMax]
[damp]
[implicit weights]
Setting dissipationFrequency=1 (dissipation is applied every this many steps)
exit
CgWave::initialize and assign forcing... numberOfFrequencies=1
CgWave::getTimeStep: c=1, cfl=0.9, timeSteppingMethod=0
getTimeStep: grid=0 : dx= 5.00e-02, dy= 5.00e-02, dt=3.182e-02
getTimeStep: grid=1, dxMin= 2.30e-02, dxMax= 4.14e-02, dt=2.068e-02
getTimeStep: grid=0: gridCFL = c/dx =  2.83e+01, gridCFL*dt=  5.85e-01
getTimeStep: grid=1: gridCFL = c/dx =  4.35e+01, gridCFL*dt=  9.00e-01
CgWave::initialize: dt=0.0206803
initializeLCBC: grid=0 orderOfAccuracyInSpace=8, orderOfAccuracyInTime=8

======= p = 4 ======
initializeLCBC: Call the LCBC constructor...
... done LCBC constructor
initializeLCBC: Finished grid = 0
initializeLCBC: grid=1 orderOfAccuracyInSpace=8, orderOfAccuracyInTime=8

======= p = 4 ======
getLcbcCoef (side,axis)=(1,1) I1=[-4,89] I2=[9,17] I3=[0,0]
initializeLCBC: Call the LCBC constructor...
... done LCBC constructor
initializeLCBC: Finished grid = 1
initializeLCBC: time to initialize LCBC = 7.340e-04 (s)

*********************************************************************************
           CgWave : Wave Equation Solver                    
           -----------------------------                  
 tFinal=0.100000, dt=2.068e-02, tPlot=1.000e-01 cfl=0.90, damp=0
 modifiedEquationApproach = hierarchical modified equation
 orderOfAccuracy=8, orderOfAccuracyInTime=8 
 timeSteppingMethod = explicit (modified equation)
 upwind dissipation is on, dissipationFrequency=1
 upwind dissipation: preComputeUpwindUt=0 
                     true=precompute Ut in upwind dissipation,
                     false=compute Ut inline in Gauss-Seidel fashion)
 implicitUpwind=0 : if true, include upwinding in implicit matrix when implicit time-stepping.
 assignInterpNeighbours = interpolate (for wider upwind stencil)
 twilightZone = polynomial, degreeInSpace=2, degreeInTime=2
 knownSolutionOption=userDefinedKnownSolution, userKnownSolution=diskEigenfunction
 useKnownSolutionForFirstStep=0, applyKnownSolutionAtBoundaries=0
 BC approach = useLocalCompatibilityBoundaryConditions. [useDefault|useOneSided|useCompatibility|useLocalCompatibility]
 useSuperGrid=0, superGridWidth=0.2
 solveHelmholtz=0 (1= we are solving a Helmholtz problem).
 computeEigenmodes=0 (1= solve from eigenvalues and eigenvectors using the WaveHoltz algorithm).
 forcingOption=noForcing.
 computeErrors=1
 number of processors=1

 Grid: grids/sice2.order8.ng5.hdf 
               Grid Data
               ---------
grid     name       gridIndexRange(0:1,0:2)           gridPoints        hmx      hmn   time-stepping
   0:  square   ([ 0:   22],[ 0:   22],[ 0:    0])           529   5.00e-02 5.00e-02    explicit
   1: Annulus   ([ 0:   85],[ 0:   13],[ 0:    0])          1204   4.14e-02 2.30e-02    explicit
 total number of grid points =1733, min(hmn)=2.30e-02, max(hmn)=5.00e-02, max(hmx)=5.00e-02,  

 grid   name      side axis    boundary condition and name
 ----   ----      ---- ----    ---------------------------
    0:  square     0    0      0 : none 
    0:  square     1    0      0 : none 
    0:  square     0    1      0 : none 
    0:  square     1    1      0 : none 
    1: Annulus     0    0     -1 : periodic 
    1: Annulus     1    0     -1 : periodic 
    1: Annulus     0    1      0 : none 
    1: Annulus     1    1      1 : dirichlet 
*********************************************************************************

if( $checkKnown eq "1" ){ $cmd="check known solution\n "; }else{ $cmd="#"; }
$cmd
#
solve
CgWave:advance: nextTimeToPlot=1.000e-01, numPlotSteps=5, new dt=2.000e-02 (dtMax=2.068e-02)
++++++++++++ getInitialConditions current=0, t=0.000e+00, dt=2.000e-02 ++++++++++++++ 
++++++ getTimeDerivative=0, initialConditionOption=2 ++++++
Disk: Bessel function solution: a=1, n=1, m=1, lambda=7.015587e+00, bcOpt=0 
Disk: Bessel function solution: a=1, n=1, m=1, lambda=7.015587e+00, bcOpt=0 
CgWave: done initial conditions
Overture::checkMemoryUsage: Interpolant::explicitInterpolate:after periodic and updateGhost, myid=0: memory usage has increased to 41.3125 (Mb)
assignLCBC: t=0.000e+00, cpu = 3.000e-05 (s)
assignLCBC: t=0.000e+00, cpu = 3.284e-02 (s)

 +++++++ InterpolatePointsOnAGrid:: SETTING setExplicitInterpolationStorageOption to precomputeAllCoefficients +++++
 +++++++ SINCE sparse interpolation is not available yet for interpolationWidth>5. FIX ME BILL!  +++++ 

++++++++++++ getInitialConditions current=1, t=2.000e-02, dt=2.000e-02 ++++++++++++++ 
++++++ getTimeDerivative=0, initialConditionOption=2 ++++++
Disk: Bessel function solution: a=1, n=1, m=1, lambda=7.015587e+00, bcOpt=0 
Disk: Bessel function solution: a=1, n=1, m=1, lambda=7.015587e+00, bcOpt=0 
CgWave: done initial conditions
Disk: Bessel function solution: a=1, n=1, m=1, lambda=7.015587e+00, bcOpt=0 
Disk: Bessel function solution: a=1, n=1, m=1, lambda=7.015587e+00, bcOpt=0 
cgWave:FD88u t=0.000e+00 (0 steps) dt=2.000e-02 maxErr= 7.61e-09, ||u||= 5.80e-01, cpu= 1.00e-06(s)
Skip first step since set to exact, or used time-periodic
assignLCBC: t=4.000e-02, cpu = 2.900e-05 (s)
assignLCBC: t=4.000e-02, cpu = 2.021e-03 (s)
assignLCBC: t=6.000e-02, cpu = 2.700e-05 (s)
assignLCBC: t=6.000e-02, cpu = 2.033e-03 (s)
assignLCBC: t=8.000e-02, cpu = 2.800e-05 (s)
assignLCBC: t=8.000e-02, cpu = 2.023e-03 (s)
assignLCBC: t=1.000e-01, cpu = 2.600e-05 (s)
assignLCBC: t=1.000e-01, cpu = 2.020e-03 (s)
cgWave:FD88u t=1.000e-01 (5 steps) dt=2.000e-02 maxErr= 6.08e-09, ||u||= 4.43e-01, cpu= 1.08e-02(s)

              -------------------CgWave Summary----------------- 
                       Wed Jul 12 20:34:02 2023
               Grid:   grids/sice2.order8.ng5.hdf 
  ==== final time= 1.00e-01, numberOfStepsTaken =        5, grids=2, gridpts =1733, interp pts=740, processors=1, clock=2.99 GHz ==== 
  ==== memory per-proc: [min=44.1328,ave=44.1328,max=44.1328](Mb), max-recorded=44.1328 (Mb), total=44.1328 (Mb)
 applyBoundaryConditions called 5 times
   Timings:         (ave-sec/proc:)   seconds    sec/step   sec/step/pt     %     [max-s/proc] [min-s/proc]
total time..........................  4.64e-02    9.28e-03    5.35e-06   100.000   4.638e-02   4.638e-02
setup and initialize................  6.70e-04    1.34e-04    7.73e-08     1.445   6.700e-04   6.700e-04
initialize BCs......................  3.43e-02    6.86e-03    3.96e-06    74.005   3.432e-02   3.432e-02
initial conditions..................  1.10e-03    2.19e-04    1.27e-07     2.365   1.097e-03   1.097e-03
advance.............................  1.14e-02    2.29e-03    1.32e-06    24.650   1.143e-02   1.143e-02
  advance rectangular grids.........  2.88e-04    5.76e-05    3.32e-08     0.621   2.880e-04   2.880e-04
  advance curvilinear grids.........  7.14e-04    1.43e-04    8.24e-08     1.539   7.140e-04   7.140e-04
    implicit solve..................  0.00e+00    0.00e+00    0.00e+00     0.000   0.000e+00   0.000e+00
  add dissipation...................  3.77e-04    7.54e-05    4.35e-08     0.813   3.770e-04   3.770e-04
  boundary conditions...............  8.31e-03    1.66e-03    9.59e-07    17.925   8.314e-03   8.314e-03
  interpolation.....................  3.57e-04    7.14e-05    4.12e-08     0.770   3.570e-04   3.570e-04
  update ghost (parallel)...........  0.00e+00    0.00e+00    0.00e+00     0.000   0.000e+00   0.000e+00
  add forcing.......................  0.00e+00    0.00e+00    0.00e+00     0.000   0.000e+00   0.000e+00
  time integral.....................  0.00e+00    0.00e+00    0.00e+00     0.000   0.000e+00   0.000e+00
  get errors........................  1.17e-03    2.35e-04    1.36e-07     2.533   1.175e-03   1.175e-03
  plotting..........................  0.00e+00    0.00e+00    0.00e+00     0.000   0.000e+00   0.000e+00
output results......................  0.00e+00    0.00e+00    0.00e+00     0.000   0.000e+00   0.000e+00
waiting (not counted)...............  0.00e+00    0.00e+00    0.00e+00     0.000   0.000e+00   0.000e+00
--------------------------------------------------------------------------------------------------------
 Memory usage: reals/grid-point = 3337.90.
--------------------------------------------------------------------------------------------------------
 ======== Parallel Distribution for CgWave (np=1)============
 numberOfGrids=2, gridDistributionList.size()=2l 
  grid=0: procs=1 [0,0], proc-decomp=[1]x[1]x[1], pts=1122=[33]x[34]x[1], pts/proc=1122=[33]x[34]x[1], ratio=34/33=  1, ghost=[0,0,0]
  grid=1: procs=1 [0,0], proc-decomp=[1]x[1]x[1], pts=2400=[96]x[25]x[1], pts/proc=2400=[96]x[25]x[1], ratio=96/25=  4, ghost=[0,0,0]

 >>>> See the file mx.log for further timings, memory usage and other statistics <<<< 

#
contour
#   plot contour lines (toggle)
exit
#
if( $go eq "go" ){ $cmd="exit"; }else{ $cmd="#"; }
$cmd
advWaveME: option=   0 grid=   0
advWaveME: orderOfAccuracy= 8 orderInTime= 8
advWaveME: addForcing= 0 forcingOption= 0
advWaveME: useUpwindDissipation= 1(explicit), useImplicitUpwindDissipation= 0 (implicit)
advWaveME: useSosupDissipation= 0(1= add upwind dissipation in this stage)
advWaveME: t,dt,c,omega=  0.20E-01  0.20E-01  0.10E+01  0.30E+01
advWaveME: gridIsImplicit= 0 adjustOmega= 0 solveHelmholtz= 0
advWaveME: ADVANCE dim=2 order=8 orderInTime=8, grid=rectangular... t=  0.20E-01
advWaveME: option=   0 grid=   1
advWaveME: orderOfAccuracy= 8 orderInTime= 8
advWaveME: addForcing= 0 forcingOption= 0
advWaveME: useUpwindDissipation= 1(explicit), useImplicitUpwindDissipation= 0 (implicit)
advWaveME: useSosupDissipation= 0(1= add upwind dissipation in this stage)
advWaveME: t,dt,c,omega=  0.20E-01  0.20E-01  0.10E+01  0.30E+01
advWaveME: gridIsImplicit= 0 adjustOmega= 0 solveHelmholtz= 0
advWaveME: ADVANCE dim=2 order=8 orderInTime=8, grid=curvilinear... t=  0.20E-01
 ASSIGN SCALED LAPLACIAN COEFF
advWave: option=   1 grid=   0
advWave: orderOfAccuracy= 8 orderInTime= 8
advWave: addForcing= 0 forcingOption= 0
advWave: useUpwindDissipation= 1 (explicit), useImplicitUpwindDissipation= 0 (implicit)
advWave: useSosupDissipation= 1 (1= add upwind dissipation in this stage)
advWave: t,dt,c,omega,gridCFL,damp=  4.00E-02   2.00E-02   1.00E+00   3.00E+00   5.66E-01   0.00E+00
advWave: gridIsImplicit= 0 takeImplicitFirstStep= 0
advWave: adjustOmega= 0 solveHelmholtz= 0 adjustHelmholtz= 1
advMxWave: grid=  0 gridType= 0 orderOfAccuracy= 8 useImplicitUpwindDissipation= 0
         : t,dt,adSosup=  0.40E-01  0.20E-01  0.28E-04 adSosup/(c*dt)=  0.1381E-02
         : useSosupDissipation= 1 sosupParameter=  1.00E+00 preComputeUpwindUt= 0
advWave: option=   1 grid=   1
advWave: orderOfAccuracy= 8 orderInTime= 8
advWave: addForcing= 0 forcingOption= 0
advWave: useUpwindDissipation= 1 (explicit), useImplicitUpwindDissipation= 0 (implicit)
advWave: useSosupDissipation= 1 (1= add upwind dissipation in this stage)
advWave: t,dt,c,omega,gridCFL,damp=  4.00E-02   2.00E-02   1.00E+00   3.00E+00   8.70E-01   0.00E+00
advWave: gridIsImplicit= 0 takeImplicitFirstStep= 0
advWave: adjustOmega= 0 solveHelmholtz= 0 adjustHelmholtz= 1
advMxWave: grid=  1 gridType= 1 orderOfAccuracy= 8 useImplicitUpwindDissipation= 0
         : t,dt,adSosup=  0.40E-01  0.20E-01  0.28E-04 adSosup/(c*dt)=  0.1381E-02
         : useSosupDissipation= 1 sosupParameter=  1.00E+00 preComputeUpwindUt= 0
advWave: option=   1 grid=   0
advWave: orderOfAccuracy= 8 orderInTime= 8
advWave: addForcing= 0 forcingOption= 0
advWave: useUpwindDissipation= 1 (explicit), useImplicitUpwindDissipation= 0 (implicit)
advWave: useSosupDissipation= 1 (1= add upwind dissipation in this stage)
advWave: t,dt,c,omega,gridCFL,damp=  6.00E-02   2.00E-02   1.00E+00   3.00E+00   5.66E-01   0.00E+00
advWave: gridIsImplicit= 0 takeImplicitFirstStep= 0
advWave: adjustOmega= 0 solveHelmholtz= 0 adjustHelmholtz= 1
advWave: option=   1 grid=   1
advWave: orderOfAccuracy= 8 orderInTime= 8
advWave: addForcing= 0 forcingOption= 0
advWave: useUpwindDissipation= 1 (explicit), useImplicitUpwindDissipation= 0 (implicit)
advWave: useSosupDissipation= 1 (1= add upwind dissipation in this stage)
advWave: t,dt,c,omega,gridCFL,damp=  6.00E-02   2.00E-02   1.00E+00   3.00E+00   8.70E-01   0.00E+00
advWave: gridIsImplicit= 0 takeImplicitFirstStep= 0
advWave: adjustOmega= 0 solveHelmholtz= 0 adjustHelmholtz= 1
