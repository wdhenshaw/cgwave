Usage: `mpirun -np N cgWave [-noplot] [file.cmd] [-g=<gridName>]'
Look for Overture configuration file=[/home/henshw/.overturerc]
Successfully opened /home/henshw/Overture.g/overturerc for reading
User commands are being saved in the file `cgWave.cmd'
 ***** Mounting file grids/nonSquare16.order8.ng5.hdf****
getFromADataBase: number of CompositeGrid(s) found =1, name[0]=nonSquare
Time to read in the grid is 6.57e-04(s)
CgWave::setup SETTING orderOfAccuracy=8
#
#  cgWave: test twilightZone
#     cgWave [-noplot] tz.cmd -g=<grid-name> -bc=[d|n|e] -cfl=<f> -tz=[polyl|trig] -degreeInSpace=<i> -degreeInTime=<i> ...
#                              -upwind=[0|1] -fx= -fy= -fz= -ft= -ts=[explicit|implicit] -rectangular=[implicit|explicit] -debug=<i>
#                              -bcApproach=[cbc|lcbc|oneSided] -meApproach=[std|ha|stencil] -implicitUpwind=[0|1]
#
# $aa=1./15.;
# printf("aa=%24.20e\n",$aa);
$omega=30.1; $x0=0; $y0=0; $z0=0; $beta=400; $numPeriods=1; $omegaSOR=1; $tol=1.e-3;
# $ad4=0; # OLD
$upwind=0; # new
$debug=3; $debugmg=1; $debugOges=0;
$ts="explicit"; $implicitUpwind=0;
$rectangular="implicit"; # for ts=implicit, set rectangular=explicit to treat rectangular grids explicitly
$beta2=.5; $beta4=0.; $beta6=0.; $beta8=0.; # weights in implicit time-stepping
$dtMax=1e10; $damp=0;
$bc="d";
$bcApproach="oneSided"; # bc Approach : cbc, lcbc, oneSided
$meApproach="std"; # or "ha"
$useKnownFirstStep=0; $takeImplicitFirstStep=0;
$orderInTime=-1;  # -1 = use default
$tz="polynomial";
$tf=1.; $tp=.1; $cfl=.9; $go="halt; "
$degreeInSpace=2; $degreeInTime=2;
$fx=2.; $fy=-1; $fz=-1; $ft=-1; # -1 : set equal to $fx
$solveri="yale"; $maxiti=2000; $rtoli=1.0e-10; $atoli=1.0e-10; # parameters for implicit time-stepping solver
GetOptions( "tz=s"=>\$tz,"degreeInSpace=i"=>\$degreeInSpace, "degreeInTime=i"=>\$degreeInTime,"cfl=f"=>\$cfl,            "x0=f"=>\$x0,"y0=f"=>\$y0,"z0=f"=>\$z0,"beta=f"=>\$beta,"debug=i"=>\$debug,"orderInTime=i"=>\$orderInTime,            "omegaSOR=f"=>\$omegaSOR,"tol=f"=>\$tol,"bc=s"=>\$bc,"tf=f"=>\$tf,"tp=f"=>\$tp,"ts=s"=>\$ts,"dtMax=f"=>\$dtMax,            "fx=f"=>\$fx,"fy=f"=>\$fy,"fz=f"=>\$fz,"ft=f"=>\$ft,"rectangular=s"=>\$rectangular,            "beta2=f"=>\$beta2,"beta4=f"=>\$beta4,"beta6=f"=>\$beta6,"upwind=i"=>\$upwind,"bcApproach=s"=>\$bcApproach,            "useKnownFirstStep=i"=>\$useKnownFirstStep,"meApproach=s"=>\$meApproach,"implicitUpwind=i"=>\$implicitUpwind,            "solveri=s"=>\$solveri,"rtoli=f"=>\$rtoli,"atoli=f"=>\$atoli,"maxiti=i"=>\$maxiti,"debugmg=i"=>\$debugmg,"debugOges=i"=>\$debugOges,            "takeImplicitFirstStep=i"=>\$takeImplicitFirstStep,"damp=f"=>\$damp,"go=s"=>\$go );
#
if( $tz eq "trig" ){ $tz="trigonometric"; }
if( $tz eq "poly" ){ $tz="polynomial"; }
if( $fy eq -1 ){ $fy=$fx; }
if( $fz eq -1 ){ $fz=$fx; }
if( $ft eq -1 ){ $ft=$fx; }
#
# time-stepping: (explicit or implicit)
$ts
#
cfl $cfl
setting cfl=0.9
tPlot $tp
 tPlot=0.1
tFinal $tf
Setting tFinal=0.2
dtMax $dtMax
Setting dtMax=1e+10
damp $damp
Setting damp=0 (coefficient of linear damping)
#
$cmd="#";
if( $bcApproach eq "oneSided" ){ $cmd="useOneSidedBCs"; }
if( $bcApproach eq "cbc"      ){ $cmd="useCompatibilityBCs"; }
if( $bcApproach eq "lcbc"     ){ $cmd="useLocalCompatibilityBCs"; }
$cmd
Setting approach for boundary conditions to useLocalCompatibilityBCs
Answer=useLocalCompatibilityBCs found in getBoundaryConditionOption
#
$cmd="#";
if( $meApproach eq "std" ){ $cmd="standard modified equation"; }
if( $meApproach eq "ha" ){ $cmd="hierarchical modified equation"; }
if( $meApproach eq "stencil" ){ $cmd="stencil modified equation"; }
# printf("meApproach=$meApproach\n");
# printf("cmd=$cmd\n");
# pause
$cmd
Setting modifiedEquationApproach=hierarchical modified equation
#
#  Set options for implicit time-stepping:
if( $ts eq "implicit" ){ $cmd="include $ENV{CGWAVE}/runs/include/implicitOptions.h"; }else{ $cmd="#"; }
$cmd
take implicit first step $takeImplicitFirstStep
Setting takeImplicitFirstStep=0 (1=take an implicit first step when implicit time-stepping
#
debug $debug
Setting debug=3
if( $orderInTime > 0 ){ $cmd="orderInTime $orderInTime"; }else{ $cmd="#"; }
$cmd
#
if( $bc eq "d" ){ $cmd="bc=dirichlet"; }elsif( $bc eq "n" ){ $cmd="bc=neumann"; }elsif( $bc eq "e" ){ $cmd="bc=exact"; }elsif( $bc eq "a" ){ $cmd="bc=absorbing"; }else{ $cmd="bc=dirichlet"; }
$cmd
Setting all boundary conditions to bc=[dirichlet]
Answer=bc=dirichlet found in getBoundaryConditionOption
turn on forcing 1
twilightZoneForcing
$tz
#
use known for first step $useKnownFirstStep
Setting useKnownSolutionForFirstStep (use known solution for first time step if possible).
#
degreeInSpace $degreeInSpace
Setting degreeInSpace=6
degreeInTime $degreeInTime
Setting degreeInTime=6
#
trig frequencies $fx $fy $fz $ft
Setting trig frequencies: fx=2, fy=2, fz=2, ft=2
#
#Gaussian params $beta $x0 $y0 0 (beta,x0,y0,z0)
# omega $omega
# omegaSOR $omegaSOR
# if( $ad4>0. ){ $upwind=1; }# for backward compatibility
upwind dissipation $upwind
Setting upwind=1 (upwind dissipation is on or off).
implicit upwind $implicitUpwind
Setting implicitUpwind=0 (1=include upwinding in implicit matrix when implicit time-stepping
# artificial dissipation $ad4
# tol $tol
# number of periods $numPeriods
exit
CgWave::initialize and assign forcing... numberOfFrequencies=1

 $$$$$$$ setup TZ: build OGPolyFunction: numCompTz=1 degreeSpace=6, degreeTime=6 ndp=7 $$$$
timeCoefficientsForTZ
    (   0) (   1) (   2) (   3) (   4) (   5) (   6) 
(0)  1.000  0.500  0.333  0.250  0.200  0.167  0.143 
CgWave::getTimeStep: c=1, cfl=0.9, timeSteppingMethod=0
getTimeStep: grid=0, dxMin= 4.42e-02, dxMax= 4.42e-02, dt=3.977e-02
getTimeStep: grid=0: gridCFL = c/dx =  2.26e+01, gridCFL*dt=  9.00e-01
CgWave::initialize: dt=0.0397748
initializeLCBC: grid=0 orderOfAccuracyInSpace=8, orderOfAccuracyInTime=8

======= p = 4 ======
getLcbcCoef (side,axis)=(0,0) I1=[-4,4] I2=[-4,20] I3=[0,0]
getLcbcCoef (side,axis)=(1,0) I1=[12,20] I2=[-4,20] I3=[0,0]
getLcbcCoef (side,axis)=(0,1) I1=[-4,20] I2=[-4,4] I3=[0,0]
getLcbcCoef (side,axis)=(1,1) I1=[-4,20] I2=[12,20] I3=[0,0]
initializeLCBC: Call the LCBC constructor...
... done LCBC constructor
initializeLCBC: Finished grid = 0
initializeLCBC: time to initialize LCBC = 8.720e-04 (s)

*********************************************************************************
           CgWave : Wave Equation Solver                    
           -----------------------------                  
 tFinal=0.200000, dt=3.977e-02, tPlot=1.000e-01 cfl=0.90, damp=0
 modifiedEquationApproach = hierarchical modified equation
 orderOfAccuracy=8, orderOfAccuracyInTime=8 
 timeSteppingMethod = explicit (modified equation)
 upwind dissipation is on, dissipationFrequency=1
 upwind dissipation: preComputeUpwindUt=0 
                     true=precompute Ut in upwind dissipation,
                     false=compute Ut inline in Gauss-Seidel fashion)
 implicitUpwind=0 : if true, include upwinding in implicit matrix when implicit time-stepping.
 assignInterpNeighbours = interpolate (for wider upwind stencil)
 twilightZone = polynomial, degreeInSpace=6, degreeInTime=6
 knownSolutionOption=noKnownSolution
 useKnownSolutionForFirstStep=0, applyKnownSolutionAtBoundaries=0
 BC approach = useLocalCompatibilityBoundaryConditions. [useDefault|useOneSided|useCompatibility|useLocalCompatibility]
 useSuperGrid=0, superGridWidth=0.2
 solveHelmholtz=0 (1= we are solving a Helmholtz problem).
 computeEigenmodes=0 (1= solve from eigenvalues and eigenvectors using the WaveHoltz algorithm).
 forcingOption=twilightZoneForcing.
 computeErrors=1
 Twilightzone flow is on. number of processors=1

 Grid: grids/nonSquare16.order8.ng5.hdf 
               Grid Data
               ---------
grid     name      gridIndexRange(0:1,0:2)           gridPoints        hmx      hmn   time-stepping
   0: square   ([ 0:   16],[ 0:   16],[ 0:    0])           289   4.42e-02 4.42e-02    explicit
 total number of grid points =289, min(hmn)=4.42e-02, max(hmn)=4.42e-02, max(hmx)=4.42e-02,  

 grid   name     side axis    boundary condition and name
 ----   ----     ---- ----    ---------------------------
    0: square     0    0      1 : dirichlet 
    0: square     1    0      1 : dirichlet 
    0: square     0    1      1 : dirichlet 
    0: square     1    1      1 : dirichlet 
*********************************************************************************

#
solve
CgWave:advance: nextTimeToPlot=1.000e-01, numPlotSteps=3, new dt=3.333e-02 (dtMax=3.977e-02)
++++++++++++ getInitialConditions current=0, t=0.000e+00, dt=3.333e-02 ++++++++++++++ 
++++++ getTimeDerivative=0, initialConditionOption=1 ++++++
$$$$ Get TZ initial conditions: t=0.000e+00, getTimeDerivative=0 $$$
$$$$ Get TZ initial conditions: ntd=0 $$$
CgWave: done initial conditions
Overture::checkMemoryUsage: Interpolant::explicitInterpolate:after periodic and updateGhost, myid=0: memory usage has increased to 39.3047 (Mb)
assignLCBC: t=0.000e+00, cpu = 2.550e-02 (s)

 +++++++ InterpolatePointsOnAGrid:: SETTING setExplicitInterpolationStorageOption to precomputeAllCoefficients +++++
 +++++++ SINCE sparse interpolation is not available yet for interpolationWidth>5. FIX ME BILL!  +++++ 

++++++++++++ getInitialConditions current=1, t=3.333e-02, dt=3.333e-02 ++++++++++++++ 
++++++ getTimeDerivative=0, initialConditionOption=1 ++++++
$$$$ Get TZ initial conditions: t=3.333e-02, getTimeDerivative=0 $$$
$$$$ Get TZ initial conditions: ntd=0 $$$
CgWave: done initial conditions
cgWave:FD88u t=0.000e+00 (0 steps) dt=3.333e-02 maxErr= 0.00e+00, ||u||= 6.14e+00, cpu= 0.00e+00(s)
Skip first step since set to exact, or used time-periodic
assignLCBC: t=6.667e-02, cpu = 2.792e-03 (s)
assignLCBC: t=1.000e-01, cpu = 2.781e-03 (s)
cgWave:FD88u t=1.000e-01 (3 steps) dt=3.333e-02 maxErr= 3.11e-14, ||u||= 6.47e+00, cpu= 1.17e-02(s)
assignLCBC: t=1.333e-01, cpu = 2.779e-03 (s)
assignLCBC: t=1.667e-01, cpu = 2.769e-03 (s)
assignLCBC: t=2.000e-01, cpu = 2.774e-03 (s)
cgWave:FD88u t=2.000e-01 (6 steps) dt=3.333e-02 maxErr= 4.62e-14, ||u||= 6.85e+00, cpu= 2.90e-02(s)

              -------------------CgWave Summary----------------- 
                       Wed Jul 12 20:33:52 2023
               Grid:   grids/nonSquare16.order8.ng5.hdf 
  ==== final time= 2.00e-01, numberOfStepsTaken =        6, grids=1, gridpts =289, interp pts=0, processors=1, clock=2.99 GHz ==== 
  ==== memory per-proc: [min=41.5469,ave=41.5469,max=41.5469](Mb), max-recorded=41.5469 (Mb), total=41.5469 (Mb)
 applyBoundaryConditions called 6 times
   Timings:         (ave-sec/proc:)   seconds    sec/step   sec/step/pt     %     [max-s/proc] [min-s/proc]
total time..........................  5.53e-02    9.22e-03    3.19e-05   100.000   5.531e-02   5.531e-02
setup and initialize................  7.14e-04    1.19e-04    4.12e-07     1.291   7.140e-04   7.140e-04
initialize BCs......................  2.67e-02    4.45e-03    1.54e-05    48.235   2.668e-02   2.668e-02
initial conditions..................  1.57e-04    2.62e-05    9.05e-08     0.284   1.570e-04   1.570e-04
advance.............................  2.91e-02    4.85e-03    1.68e-05    52.616   2.910e-02   2.910e-02
  advance rectangular grids.........  0.00e+00    0.00e+00    0.00e+00     0.000   0.000e+00   0.000e+00
  advance curvilinear grids.........  1.39e-02    2.31e-03    8.00e-06    25.092   1.388e-02   1.388e-02
    implicit solve..................  0.00e+00    0.00e+00    0.00e+00     0.000   0.000e+00   0.000e+00
  add dissipation...................  3.00e-04    5.00e-05    1.73e-07     0.542   3.000e-04   3.000e-04
  boundary conditions...............  1.42e-02    2.37e-03    8.21e-06    25.743   1.424e-02   1.424e-02
  interpolation.....................  1.19e-04    1.98e-05    6.86e-08     0.215   1.190e-04   1.190e-04
  update ghost (parallel)...........  0.00e+00    0.00e+00    0.00e+00     0.000   0.000e+00   0.000e+00
  add forcing.......................  0.00e+00    0.00e+00    0.00e+00     0.000   0.000e+00   0.000e+00
  time integral.....................  0.00e+00    0.00e+00    0.00e+00     0.000   0.000e+00   0.000e+00
  get errors........................  2.71e-04    4.52e-05    1.56e-07     0.490   2.710e-04   2.710e-04
  plotting..........................  0.00e+00    0.00e+00    0.00e+00     0.000   0.000e+00   0.000e+00
output results......................  0.00e+00    0.00e+00    0.00e+00     0.000   0.000e+00   0.000e+00
waiting (not counted)...............  0.00e+00    0.00e+00    0.00e+00     0.000   0.000e+00   0.000e+00
--------------------------------------------------------------------------------------------------------
 Memory usage: reals/grid-point = 18843.02.
--------------------------------------------------------------------------------------------------------
 ======== Parallel Distribution for CgWave (np=1)============
 numberOfGrids=1, gridDistributionList.size()=1l 
  grid=0: procs=1 [0,0], proc-decomp=[1]x[1]x[1], pts=756=[27]x[28]x[1], pts/proc=756=[27]x[28]x[1], ratio=28/27=  1, ghost=[0,0,0]

 >>>> See the file mx.log for further timings, memory usage and other statistics <<<< 

contour
exit
if( $go eq "go" ){ $cmd="exit"; }else{ $cmd="#"; }
$cmd
advWaveME: option=   0 grid=   0
advWaveME: orderOfAccuracy= 8 orderInTime= 8
advWaveME: addForcing= 1 forcingOption= 1
advWaveME: useUpwindDissipation= 1(explicit), useImplicitUpwindDissipation= 0 (implicit)
advWaveME: useSosupDissipation= 0(1= add upwind dissipation in this stage)
advWaveME: t,dt,c,omega=  0.33E-01  0.33E-01  0.10E+01  0.30E+02
advWaveME: gridIsImplicit= 0 adjustOmega= 0 solveHelmholtz= 0
advWaveME: ADVANCE dim=2 order=8 orderInTime=8, grid=curvilinear... t=  0.33E-01
 ASSIGN SCALED LAPLACIAN COEFF
advWave: option=   1 grid=   0
advWave: orderOfAccuracy= 8 orderInTime= 8
advWave: addForcing= 1 forcingOption= 1
advWave: useUpwindDissipation= 1 (explicit), useImplicitUpwindDissipation= 0 (implicit)
advWave: useSosupDissipation= 1 (1= add upwind dissipation in this stage)
advWave: t,dt,c,omega,gridCFL,damp=  6.67E-02   3.33E-02   1.00E+00   3.01E+01   7.54E-01   0.00E+00
advWave: gridIsImplicit= 0 takeImplicitFirstStep= 0
advWave: adjustOmega= 0 solveHelmholtz= 0 adjustHelmholtz= 1
advMxWave: grid=  0 gridType= 1 orderOfAccuracy= 8 useImplicitUpwindDissipation= 0
         : t,dt,adSosup=  0.67E-01  0.33E-01  0.46E-04 adSosup/(c*dt)=  0.1381E-02
         : useSosupDissipation= 1 sosupParameter=  1.00E+00 preComputeUpwindUt= 0
advWave: option=   1 grid=   0
advWave: orderOfAccuracy= 8 orderInTime= 8
advWave: addForcing= 1 forcingOption= 1
advWave: useUpwindDissipation= 1 (explicit), useImplicitUpwindDissipation= 0 (implicit)
advWave: useSosupDissipation= 1 (1= add upwind dissipation in this stage)
advWave: t,dt,c,omega,gridCFL,damp=  1.00E-01   3.33E-02   1.00E+00   3.01E+01   7.54E-01   0.00E+00
advWave: gridIsImplicit= 0 takeImplicitFirstStep= 0
advWave: adjustOmega= 0 solveHelmholtz= 0 adjustHelmholtz= 1
